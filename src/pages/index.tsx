import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useSession, signIn, signOut } from "next-auth/react";
import { api } from "~/utils/api";
import { toast as sonnerToast } from "sonner";
import { useRouter } from "next/router";
import formImage from "../../public/form.png";
import { GetServerSideProps } from "next";
import { getServerAuthSession } from "~/server/auth";
import { db } from "~/server/db";
import { Form } from "@prisma/client";
type Props = {
  forms: Form[];
};
export default function Home({ forms }: Props) {
  const router = useRouter();

  const createForm = api.forms.create.useMutation();

  return (
    <>
      <Head>
        <title>NT Static Form</title>
        <meta name="description" content="Generated by Nhat Tien" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="">
        <div className="flex w-full flex-col items-start justify-center bg-slate-950 px-96 py-5">
          <h1 className="text-muted">Start a new Form</h1>
          <div className="flex items-center justify-center">
            <div className="flex flex-col items-start justify-center">
              <Image
                src={"/forms-blank-googlecolors.png"}
                alt="add new form"
                width={192}
                height={192}
                className="my-3 rounded border border-gray-300 hover:cursor-pointer hover:border-slate-900"
                onClick={() => {
                  sonnerToast.promise(createForm.mutateAsync(), {
                    success: ({ form }) => {
                      // if you want to refresh the homepage to get the new form, use this: router.replace(router.asPath);
                      router.push(`/form/${form.id}`);
                      return "Form Created";
                    },
                    loading: "Creating Form...",
                    error: "Error Creating Form",
                  });
                }}
              />
              <h1 className="text-muted">New form</h1>
            </div>
          </div>
        </div>
        <div className="flex w-full flex-col items-start justify-center px-96 py-5">
          <h1 className="text-xl font-semibold">Recent Forms</h1>
          <div className="mt-3 flex flex-wrap items-start justify-center">
            {forms.map((form) => {
              return (
                <div
                  key={form.id}
                  className="mb-10 mr-10 flex w-[192px] flex-col rounded border hover:cursor-pointer hover:border-slate-900"
                >
                  <Link href={`/form/${form.id}`}>
                    <Image
                      src={formImage.src}
                      alt={form.name}
                      width={192}
                      height={192}
                      className="border-b"
                    />
                  </Link>
                  <h1 className="truncate p-3 text-muted-foreground">
                    {form.name}
                  </h1>
                </div>
              );
            })}
          </div>
        </div>
        <AuthShowcase />
      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getServerAuthSession(context);
  if (!session?.user) {
    return {
      redirect: {
        destination: "/signin",
        permanent: false,
      },
    };
  }
  await new Promise((resolve) => setTimeout(resolve, 5000));
  const forms = await db.form.findMany({
    where: {
      userId: session.user.id,
    },
  });
  return {
    props: {
      forms,
    },
  };
};

function AuthShowcase() {
  const { data: sessionData } = useSession();

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <button
        className=""
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
}
